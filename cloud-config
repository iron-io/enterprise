#cloud-config

write_files:
  - path: /etc/modules-load.d/nf.conf
    content: |
      nf_conntrack
      nf_conntrack_ipv4
  - path: /etc/sysctl.d/nf.conf
    permissions: 0644
    owner: root
    content: |
      net.netfilter.nf_conntrack_tcp_timeout_established = 600
      net.netfilter.nf_conntrack_generic_timeout = 60
      net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 30
      net.netfilter.nf_conntrack_max=524288
  - path: /etc/systemd/system/docker.service.d/increase-ulimit.conf
    owner: core:core
    permissions: 0644
    content: |
      [Service]
      LimitMEMLOCK=infinity
      LimitNOFILE=262144
  - path: /home/core/ironauth.service
    content: |
      [Unit]
      Description=IronAuth
      After=docker.service
      Requires=docker.service

      [Service]
      User=core
      EnvironmentFile=/etc/environment
      TimeoutStartSec=0
      Restart=on-failure
      ExecStartPre=-/usr/bin/docker kill ironauth
      ExecStartPre=-/usr/bin/docker rm ironauth
      ExecStartPre=/usr/bin/docker pull iron/auth
      ExecStartPre=/usr/bin/etcdctl set "/ironauth/peers/${COREOS_PRIVATE_IPV4}:8090" "${COREOS_PRIVATE_IPV4}:8090"
      ExecStart=/usr/bin/bash -c '/usr/bin/docker run --net=host --name ironauth --volumes-from irondata -p 8090:8090 -p 8091:8091 -p 8092:8092 -e CONFIG_JSON="`/usr/bin/etcdctl get /ironauth/config.json`" -e DATACONFIG_COHOSTS=`/usr/bin/etcdctl ls /ironauth/peers | /usr/bin/xargs -n 1 etcdctl get | /usr/bin/sed -e "s/\(.*\)/\\"\\1\\"/" | /usr/bin/paste -sd "," - | /usr/bin/sed -e "s/\(.*\)/[\1]/"` iron/auth'
      ExecStop=/usr/bin/docker stop ironauth

      [X-Fleet]
      Global=true

  - path: /home/core/ironmq.service
    content: |
      [Unit]
      Description=IronMQ
      After=docker.service
      Requires=docker.service

      [Service]
      User=core
      EnvironmentFile=/etc/environment
      Restart=on-failure
      TimeoutStartSec=0
      ExecStartPre=-/usr/bin/docker kill ironmq
      ExecStartPre=-/usr/bin/docker rm ironmq
      ExecStartPre=/usr/bin/docker pull iron/mq
      ExecStartPre=/usr/bin/etcdctl set "/ironmq/peers/${COREOS_PRIVATE_IPV4}:8080" "${COREOS_PRIVATE_IPV4}:8080"
      ExecStart=/usr/bin/bash -c '/usr/bin/docker run --net=host --name ironmq --volumes-from irondata -p 8080:8080 -p 8081:8081 -p 8082:8082 -e CONFIG_JSON="`/usr/bin/etcdctl get /ironmq/config.json`" -e LEVELDB_CONFIG_COHOSTS=`/usr/bin/etcdctl ls /ironmq/peers | /usr/bin/xargs -n 1 etcdctl get | /usr/bin/sed -e "s/\(.*\)/\\"\\1\\"/" | /usr/bin/paste -sd "," - | /usr/bin/sed -e "s/\(.*\)/[\1]/"` iron/mq'
      ExecStop=/usr/bin/docker stop ironmq

      [X-Fleet]
      Global=true

  - path: /home/core/hud-e.service
    content: |
      [Unit]
      Description=Iron HUD-E
      After=docker.service
      Requires=docker.service

      [Service]
      User=core
      TimeoutStartSec=0
      Restart=on-failure
      ExecStartPre=-/usr/bin/docker kill hud-e
      ExecStartPre=-/usr/bin/docker rm hud-e
      ExecStartPre=/usr/bin/docker pull iron/hud-e
      ExecStart=/usr/bin/docker run --name hud-e -p 3000:3000 --net=host -e IRON_AUTH_URL=localhost:8090 -e SECRET_KEY_BASE=$RANDOM_STRING iron/hud-e
      ExecStop=/usr/bin/docker stop hud-e

  - path: /home/core/auth_config.json
    content: |
      {
          "license": {
              "key": "abcdef123456"
          },
          "api": {
              "http_port": 8090
          },
          "data": {
              "dir_description": "Where data files will be stored",
              "dir": "../data"
          },
          "super_user": {
              "token": "adminToken",
              "email": "admin@somewhere.com",
              "password": "password"
          }
      }

  - path: /home/core/mq_config.json
    content: |
      {
        "license": {
          "description": "This is your license key provided by Iron.io",
          "key": "abcdef123456"
        },
        "api": {
          "http_port": 8080
        },
        "auth_description":"remove auth section for no auth",
        "auth": {
          "host": "http://localhost:8090"
        },
        "pusher": {
          "num_queues_brokers": 10,
          "num_messages_consumers": 50,
          "dial_timeout": 10,
          "request_timeout": 60,
          "num_dequeue_messages": 3,
          "base_url": "http://localhost:8080"
        },
        "data": {
          "aes_key_description": "Key for generating id's.",
          "aes_key": "770A8A65DA156D24EE2A093277530142",
          "dir_description": "Where data files will be stored",
          "dir": "../data",
          "cache_size_description": "Size of cache in MB -- don't get carried away",
          "cache_size": 128
        }
      }

coreos:
  update:
    reboot-strategy: off
  etcd:
    # TODO YOU MUST REPLACE THIS FOR EACH INSTALL
    discovery: https://discovery.etcd.io/{TODO_GET_A_NEW_ONE}
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  fleet:
    public-ip: $public_ipv4
  units:
    - name: docker.service
      command: restart # restart docker for new ulimits
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: systemd-modules-load.service
      command: restart
    - name: systemd-sysctl.service
      command: restart
    - name: mnt.mount
      command: start
      content: |
        [Mount]
        What=/dev/xvdb
        Where=/mnt
        Type=ext4
    - name: irondata.service
      command: start
      content: |
        [Unit]
        Description=Volume for persistent iron service data and configs
        After=docker.service
        After=mnt.mount

        [Service]
        TimeoutStartSec=0
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/docker run -name irondata -v /mnt/data:/ironmq/data busybox true
